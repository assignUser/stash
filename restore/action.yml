name: "Stash - restore"
description: "Restore you build cache stash."
author: assignUser

inputs:
  key:
    description: >
      Name of the artifact the stash is stored as. There is no `restore-key`
      functionality as there is no eviction (only expiry).

      The action checks the current branch for a stash, if there is no match,
      the base branch(PRs)/default branch is searched. If there is more than one
      match for any branch the most recently updated stash takes precedent.

      To reduce amount of api calls (1000/h/repo limit) the name of the
      current branch will be appended to the key. Key and branchname will be normalized.
    required: true

  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
    default: ${{ github.workspace }}

  token:
    description: 'GITHUB_TOKEN to use to authenticate against the artifacts api.'
    default: ${{ github.token }}
    required: true
outputs:
  stash-hit:
    description: >
      A string ('true' or 'false') that indicates if a stash was restored or not. It is not
      possible to make this a boolean, as composite-action outputs are always strings. Sorry.
    value: ${{ steps.output.outputs.stash-hit }}

runs:
  using: 'composite'
  steps:
    - name: Mung Artifact Name
      id: mung
      shell: bash
      env:
        key: "${{ inputs.key }}"
        stash_path: "${{ inputs.path }}"
        ref: "${{ github.ref_name }}"
        base_ref: "${{ github.base_ref || github.event.repository.default_branch }}"
      run: |
        python ${{ github.action_path }}/../mung.py -o stash_head
        python ${{ github.action_path }}/../mung.py -o stash_base -r base_ref
        echo "stash_path=$(python -c 'import os; print(os.path.abspath(os.environ["stash_path"]))')" >> $GITHUB_OUTPUT

    - name: Check for stash artifact
      id: check-stash
      env:
        GH_TOKEN: "${{ inputs.token }}"
      shell: bash
      run: |
        function get_artifacts() {
          name=$1
          file=$2
          endpoint=${3:-'/repos/${{ github.repository }}/actions/artifacts'}

          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -f name="$name" \
            -q '.artifacts | max_by(.updated_at | fromdate)' \
            --method=get \
            "$endpoint" > "$file" 
        }

        # Check if an artifact with the same name has been uploaded in the current workflow.
        # Most recent hit by "updated_at" is used.
        get_artifacts '${{ steps.mung.outputs.stash_head }}' \
                      '/tmp/wf.json' \
                      '/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts'

        stash_name=$(jq -r '.name // empty' /tmp/wf.json)

        if [ -n "$stash_name" ]; then
          echo "stash_name=$stash_name" >> $GITHUB_OUTPUT
          echo 'stash_run_id=${{ github.run_id }}' >> $GITHUB_OUTPUT
          echo "Restoring $stash_name from this workflow run." 
          exit 0
        fi

        # Check across other workflow runs in the current branch.
        get_artifacts '${{ steps.mung.outputs.stash_head }}' \
                      '/tmp/branch.json'

        stash_name=$(jq -r '.name // empty' /tmp/branch.json)
        if [ -n "$stash_name" ]; then
          echo "stash_name=$stash_name" >> $GITHUB_OUTPUT
          echo "stash_run_id=$(jq '.workflow_run.id' /tmp/branch.json)" >> $GITHUB_OUTPUT
          echo "Restoring $stash_name from branch $(jq '.workflow_run.head_branch' /tmp/branch.json)."
          exit 0
        fi

        # Check on base/default branch. 
        get_artifacts '${{ steps.mung.outputs.stash_base }}' \
                      '/tmp/base.json'

        stash_name=$(jq -r '.name // empty' /tmp/base.json)
        if [ -n "$stash_name" ]; then
          echo "stash_name=$stash_name" >> $GITHUB_OUTPUT
          echo "stash_run_id=$(jq '.workflow_run.id' /tmp/base.json)" >> $GITHUB_OUTPUT
          echo "Restoring $stash_name from branch $(jq '.workflow_run.head_branch' /tmp/base.json)."
        fi

    - name: Download Stash
      shell: bash
      id: download
      env:
        GH_TOKEN: "${{ inputs.token }}"
        STASH_NAME: "${{ steps.check-stash.outputs.stash_name }}"
        STASH_RUN_ID: "${{ steps.check-stash.outputs.stash_run_id }}"
      run: |
        gh run download $STASH_RUN_ID --name $STASH_NAME --dir "${{ steps.mung.outputs.stash_path }}"
        echo "Succesfully restored stash $STASH_NAME."


    - name: Set stash-hit Output
      id: output
      if: ${{ ! cancelled() }}
      shell: bash
      run: |
        if [ "${{ steps.download.conclusion }}" == "success" ]; then
          echo "stash-hit=true" >> $GITHUB_OUTPUT
        else
          echo "stash-hit=false" >> $GITHUB_OUTPUT
          echo "No stash found for keys ${{ steps.mung.outputs.stash_head }} or ${{ steps.mung.outputs.stash_base }}."
        fi
