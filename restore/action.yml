name: "Stash - restore"
description: "Restore you build cache stash."
author: assignUser

inputs:
  key:
    description: >
      Name of the artifact the stash is stored as. There is no `restore-key`
      functionality as there is no eviction (only expiry).

      The action checks the current branch for a stash, if there is no match
      the base branch (only for PRs) is searched. If there is more than one
      match for any branch the most recently updated stash takes precedent.
    required: true

  path:
    description: 'A file, directory or wildcard pattern that describes what to upload'
    required: true
    default: ${{ github.workspace }}

  token:
    description: 'GITHUB_TOKEN to use to authenticate against the artifacts api.'
    default: ${{ github.token }}
    required: true
outputs:
  stash-hit:
    description: >
      A string ('true' or 'false') that indicates if a stash was restored or not. It is not
      possible to make this a boolean, as composite-action outputs are always strings. Sorry.
    value: ${{ steps.output.outputs.stash-hit }}

runs:
  using: 'composite'
  steps:
    - name: Check run for artifact
      id: check-stash
      env:
        GH_TOKEN: "${{ inputs.token }}"
      shell: bash
      run: |
        # Check if an artifact with the same name has been uploaded in the current workflow.
        # and resolve a glob pattern to an actual name. Most recent hit by "updated_at" is used.
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts > res.json

        stash_name=$(jq '.artifacts
                          | map(select(.name | test ("${{ inputs.key }}")))
                          | max_by(.updated_at)
                          | .name // empty' res.json | tr -d '"')

        if [ -n "$stash_name" ]; then
          echo "stash_exists=true" >> $GITHUB_OUTPUT
          echo "stash_name=$stash_name" >> $GITHUB_OUTPUT
        else
          echo "stash_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Check across repo
      id: cross-repo
      if: ${{ steps.check-stash.outputs.stash_exists == 'false' }}
      env:
        GH_TOKEN: "${{ inputs.token }}"
      shell: bash
      run: |
        # Check across other workflow runs.
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -f name="${{ inputs.key }}" \
          -f per-page=100 \
          --method=get \
          /repos/${{ github.repository }}/actions/artifacts > res.json

        # todo filter for base and current branch
        # jq '.artifacts
        #    | map(select(.expired == false and .name == "${{ inputs.key }}"))
        #    | group_by(.workflow_run.head_repository_id)
        #    | map(max_by(.updated_at | fromdate))
        #    | sort_by(.created_at | fromdate )
        #    | if length == 0 then {}
        #      elif .[1].head_repository_id == 759960986 then .[0]
        #      else .[1] end' res.json > stash.json

        jq '.artifacts
              | map(select(.name | test ("${{ inputs.key }}")))
              | max_by(.updated_at)' res.json > stash.json

        stash_name=$(jq '.name // empty' stash.json | tr -d '"')
        if [ -n "$stash_name" ]; then
          echo "stash_name=$stash_name" >> $GITHUB_OUTPUT
          echo "stash_run_id=$(jq '.workflow_run.id' stash.json)" >> $GITHUB_OUTPUT
          echo "Restoring $stash_name from branch $(jq '.workflow_run.head_branch' stash.json)."
        fi

    - name: Download Stash from other workflow run
      shell: bash
      id: download-cross
      if: ${{ steps.check-stash.outputs.stash_exists == 'false' && steps.cross-repo.outputs.stash_name != ''}}
      env:
        GH_TOKEN: "${{ inputs.token }}"
        STASH_NAME: "${{ steps.cross-repo.outputs.stash_name }}"
        STASH_RUN_ID: "${{ steps.cross-repo.outputs.stash_run_id }}"
      run: |
        gh run download $STASH_RUN_ID --name $STASH_NAME --dir "${{ inputs.path }}"
        echo "Succesfully restored stash $STASH_NAME for key: ${{ inputs.key }}."


    - name: Download Stash from current workflow run
      id: download-intra
      if: ${{ steps.check-stash.outputs.stash_exists == 'true' }}
      env:
        GH_TOKEN: "${{ inputs.token }}"
        STASH_NAME: "${{ steps.check-stash.outputs.stash_name }}"
        STASH_RUN_ID: "${{ github.run_id }}"
      continue-on-error: true
      shell: bash
      run: |
        gh run download $STASH_RUN_ID --name $STASH_NAME --dir "${{ inputs.path }}"
        echo "Succesfully restored stash $STASH_NAME for key: ${{ inputs.key }}."

    - name: Set stash-hit Output
      id: output
      if: ${{ ! cancelled() }}
      shell: bash
      run: |
        if [ "${{ steps.download-cross.conclusion }}" == "success" -o "${{ steps.download-intra.conclusion }}" == "success" ]; then
          echo "stash-hit=true" >> $GITHUB_OUTPUT
        else
          echo "stash-hit=false" >> $GITHUB_OUTPUT
          echo "No stash found for key: ${{ inputs.key }}"
        fi
